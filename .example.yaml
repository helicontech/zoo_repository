#!zoo.1.0
# Repository with Zoo applications is a plain YAML file. A root level of the file is considered
# to be a list. There can be three types of records in this list: Product, Application or Engine.
# Each record is a dictionary. A product record must contain 'product: ProductID' field, an
# application must contain 'application: AppID' field and an engine must contain 'engine: EngineID'
# field. Although these fields are not necessarily must be placed at the beginning of record,
# putting them so will significantly improve readability of the file.


# ID of the product is used to uniquely identify product in repository.
# It is usually alphanumeric and case sensitive. Used for references.
- product: SomeProductId
  title: 'Human friendly name'
  # Version is used in comparisons, so better be numbers separated by dots. Length is variable.
  version: 1.0.0.0
  description: |
    Long multiline product description, used to display when enough
    room is available. No tags or links currently supported.
  # Link to the product's homepage
  link: http://www.helicontech.com/zoo/
  # Link to license
  eula: http://www.helicontech.com/zoo/license.html
  # Author name
  author: Helicon Tech
  # Link to the icon. Can be a relative reference from current YAL or a global HTTP link.
  # All assets referenced with relative paths will be copied during feed compilation.
  icon: ruby-100x100.png
  # Tags are used to organize products into categories. Must be a short alphanumeric string
  # as they will be displayed in the categories menu, so should fit.
  tags:
  - server
  - cms
  - engine
  - database
  - blog
  - framework

  # FILTERS
  # Fields like os, bitness, webserver, and lang together from a product platform.
  # These tags may or may not be present in each product record, however when specified,
  # they will be ysed to filter fields from repository that match current platform only.
  # This also introduces concept of filters that must be explained further:
  # There can be more than one record with the same ProductID in the repository. In this case
  # when repository is loaded all records are filtered against platform and user settings first.
  # Records that does not match user settings are ignored. Then multiple records are merged into 
  # one by adding fields from all records and overwriting existing from up to down.
  # If user set bitness to 64, records with 'bitness: 32' will not be added to his output.

  # The only supported os at the moment is 'windows'Version can also be specified to filter for
  # only suitable version 'os: windows>=6.0'
  os: windows
  # Possible bitness values are 32 or 64
  bitness: 32
  # Possible server filter values are 'iis' or 'iisexpress'
  webserver: iis
  # Localisation filter is currently not used
  lang: en

  # A list of product/engine/application dependencies. Each value is a string literal
  # with format like 'RequiredProductID' or 'AnotherId>=1.0' to specify minimum required
  # version of dependency.
  
  dependencies:
    - ProductId1>=1.00
    - ProductId2==1.1.1.1
    - ProductId3


  # Install command is a multiline string, containing a plain Python code that will
  # be executed upon product/application/engine installation. Zoo supply a specific API
  # to make product installation easier that will be described below.
  install_command: |

      # Object self represents a reference to the installing product object.
      # Fields are open for writing. This object will be saved into installed products after installation
      self.version = '1.5'
      
      # parameters dictionary is a shortcut to self.parameters and can be used to read, modify and create 
      # parameters that will be stored with newly installed product.
      # Path where product is installing can be obtained as:
      install_path =  parameters['install_dir']
      # For application a path to the created web site is:
      install_path =  parameters['physical-path']

      # List of some other known fields in a parameters dictionary.
      # 'create-site' - True|False
      # 'site-name'
      # 'site-binding'
      # 'create-app' - True|False
      # 'app-name'
      # 'create-app-pool'  - True|False
      # 'app-pool-name'
      # 'app-pool-dot-net'
      # 'physical-path'
      # 'install_dir'
      # 'db-engine'
      # 'db-host'
      # 'db-port'
      # 'db-username'
      # 'db-password'
      # 'db-name'

      # os.cmd — executes a shell command
      # example: give read & execute permissions of IIS_IUSRS group to the product installation directory
      # ignoring return code. If no 'ignore_exit_code' parameter set, then nonzero exit codes will fail installation
      os.cmd(r'icacls "{0}" /t /grant:r "IIS_IUSRS:(OI)(CI)RX"'.format(parameters['install_dir']), ignore_exit_code=True)

      # Delete directory tree, with files and subdirectories.
      os.delete_path(path)

      # copy file
      os.copy_file('source', 'dest')

      # Append file 'dest' with the content of file 'source' 
      os.append_file('source', 'dest')

      # Unpack files from archive. If 'source_internal_dir' is specified this command
      # will unpack only content of 'source_internal_dir' if it is found in the archive
      os.un7zip(path, destination, source_internal_dir=None)
      # Example:
      # Unpack 'coldboc' directory from the first downloaded file to the product installation path
      os.un7zip(files[0].path, parameters['install_dir'], "coldbox")

      # Globally set environment variable. Newly set variables become available in Zoo right after this command
      # however some other applications and especially services may not reload their environment unless restarted.
      os.set_system_env('VAR_NAME', 'Some Value')

      # Remove global environment variable
      os.remove_system_env('VARIABLE_NAME')

      # Changes current directory. Useful for os.cmd chain.
      os.chdir(path)
      
      # Recursively create specified path. This command will ensure to make all folders in the path if they don't exist.
       # создать папки для всего пути в path, например c:\inetpub\wwwroot\site-name\application\folder
      os.make_dir('c:\inetpub\wwwroot\site-name\some\long\folder\name')
      # Returns true if specified path (file or folder) exists
      os.path_exists("c:\some\local\file.txt")
      
      # Join the path using OS specific path separator:
      os,path_join(parameters['install_dir'], 'some', 'sub', 'directory')

      # Read from Windows registry. 
      windows.registry_read("HKLM\\SOFTWARE\\Helicon\\ZooInstaller","InstallDir",bitness="32")

      # Install Windows MSI package with optional parameters
      windows.install_msi(msi_path, optional_parameters: dict=None, ignore_exit_code=False, no_wait=False)
      
      # Example: install first downloaded file into product installation directory
      windows.install_msi(files[0].path, {"TARGETDIR":parameters['install_dir']})
      # optional_parameters = is a dictionary of optional parameters that will be passed to msiexec.exe command.
      # ignore_exit_code - some installaitons may return error core even when installation went fine.
      # example:
      result = windows.install_msi(files[0].path, ignore_exit_code=True)
      if result and result != 1707:
        raise Exception('Mysql installation error with error code {0}'.format(result))
      # no_wait - this will run set up asyncronously. Needed for Zoo self upgrade.

      # Uninstall Windows MSI package (by path to the existing .msi file)
      windows.uninstall_msi("some_file.msi", ignore_exit_code=False)

      # Uninstall Windows program by its name. Strings or regular expressions are allowed.
      windows.uninstall_msi_by_name("Some product name", version=None)
      # Example:
      windows.uninstall_msi_by_name("Microsoft .NET Framework 4.5.1")
      windows.uninstall_msi_by_name(re.compile(r"Strawberry\s+Perl\s+\(64.*\)", re.I), self.version)

      # Find installed Windows program by name
      windows.get_installed_program ('Name', version=None)
      # name - string|regex
      # version - string, optional
      # This function returns object of InstalledProductInfo
      # example:
      result = windows.get_installed_program(re.compile("Java SE Development Kit 7 Update \d+ \(64-bit\)", re.I))

      # Install Windows feature by name (uses DISM)
      windows.install_feature("IIS-WebServerRole")
      # Remove Windows feature
      windows.uninstall_feature("IIS-WebServerRole")

      # set NTFS write promissions. Needed for application installations, for various log folders, etc. 
      windows.set_write_permission(path, user_or_group)
      windows.set_write_permission('log', 'IIS_IUSRS')

      # Get a version of executable file by path
      windows.get_file_version(filename, parts=None)
      #    parts - how many version groups will be returned
      #    3 = "1.2.3"
      #    2 = "1.2"
      #    1 = "1"
      # example:
      result.version = windows.get_file_version(parameters['install_dir'] + '\\php.exe', parts=3)

      # Add to PATH environment variable
      windows.add_to_system_path(path)
      # example:
      windows.add_to_system_path('{0}\\bin.format(parameters['install_dir'])')

      # Find and remve specified path from PATH environment variable.
      windows.remove_from_system_path(path)
      windows.remove_from_system_path('{0}\\bin'.format(parameters['install_dir']) )



  # This is optional command that is executed if product is upgraded. "Upgrade" button will
  # appear only near products that has upgrade_command and new version is available.
  upgrade_command: |
      # syntax is identical to install_command
      os.un7zip(files[0].path, parameters['install_dir'])


  # Will be executed when product/engine is deleted. 
  uninstall_command: |
      # Syntax is identical to install_command
      os.delete_path(parameters['install_dir'])


  # This command will be executed during system scan for installed products
  # It should set result variable to the instance of InstalledProductInfo class 
  find_installed_command: |
      # it is possible to use same commands that in install_command, but be aware this commands
      # are executed in series during each system scan or startup, so must be fast.
      
      # example 1
      if 'install_dir' in parameters and os.path_exists(parameters['install_dir']):
        result = InstalledProductInfo()
        result.version = product.version
        result.install_dir = parameters['install_dir']
      
      # example 2:
      result = windows.get_installed_program("Helicon Zoo IIS7 module v4")
      
      # example 3:
      result = windows.get_installed_program(re.compile(r"Python\s+2\.7\.5\.*", re.I))
      if result:
        result.version = '2.7.5'
        result.install_dir = windows.registry_read("HKLM\\SOFTWARE\\Python\\PythonCore\\2.7\\InstallPath","","32")


  # List of files that will be downloaded for this product installation. Downloaded files are stored in cache
  # to speed up further installations if needed. Downloaded files are available as files array during execution
  # of install_command like: files[0].path
  files:

  # relative path (from current YAML file) 
  - file: file1.zip

  # an absolute URL path
  - file: http://dist.codehaus.org/jetty/jetty-hightide-7.6.7/jetty-hightide-7.6.7.v20120910.zip

  # An absolute URL with CRC check 
  - file: http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi
    md5: 0006d6219160ce6abe711a71c83ebb0
    sha1: a482e48e151cff76dcc1479b9efc367da8fb66a7

  # If URL does not contain file name part, it can be set manually
  - file: http://go.microsoft.com/fwlink/?LinkId=321332
    filename: NDP451-KB2858728-x86-x64-AllOS-ENU.exe


  # Most advanced variant with cookies
  - file: http://download.oracle.com/otn-pub/java/jdk/7u11-b21/jdk-7u11-windows-i586.exe
    sha1: a482e48e151cff76dcc1479b9efc367da8fb66a7
    cookies:
      - s_cc: "true"
        oraclelicense: accept-securebackup-cookie
        s_nr: "1395934850788"
        gpw_e24: http%3A%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk7-downloads-1880260.html;
        s_sq: "%5B%5BB%5D%5D"

